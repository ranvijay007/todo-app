{"version":3,"sources":["logo.svg","Note.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Note","id","msg","deleteNote","useState","isMark","setMark","className","onClick","App","notes","setNote","input","setInput","src","logo","width","alt","onSubmit","e","preventDefault","length","handleSubmit","type","onChange","target","value","placeholder","disabled","map","item","key","filter","note","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,2JC4B5BC,MAzBf,YAAwC,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,WAAc,EACXC,oBAAS,GADE,mBAC9BC,EAD8B,KACtBC,EADsB,KAKrC,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,QACb,2BACGN,EADH,KACQ,0BAAMM,UAAWF,EAAS,SAAW,IAArC,IAA2CH,KAGrD,yBAAKK,UAAU,OACb,4BAAQA,UAAU,MAAMC,QAAS,kBAAML,EAAWF,KAAlD,UAEU,IAHZ,OAKE,4BAAQM,UAAU,QAAQC,QAfnB,WACXF,GAASD,KAeFA,EAAS,SAAW,W,gBC4BhBI,MA5Cf,WAAgB,IAAD,EACYL,mBAAS,IADrB,mBACNM,EADM,KACCC,EADD,OAEaP,mBAAS,IAFtB,mBAENQ,EAFM,KAECC,EAFD,KAcb,OACE,6BACE,wBAAIN,UAAU,SAAd,iBACA,yBAAKO,IAAKC,IAAMC,MAAM,QAAQT,UAAU,MAAMU,IAAI,KAClD,0BAAMC,SAAU,SAACC,GAAD,OAdC,SAACA,EAAGT,EAAOC,EAASC,EAAOC,GAC9CM,EAAEC,iBACF,IAAMnB,EAAKS,EAAMW,OAASX,EAAMA,EAAMW,OAAS,GAAGpB,GAAK,EAAI,EAC3DU,EAAQ,GAAD,mBAAKD,GAAL,CAAY,CAAET,GAAIA,EAAIC,IAAKU,MAClCC,EAAS,IAUgBS,CAAaH,EAAGT,EAAOC,EAASC,EAAOC,KAC5D,2BACEU,KAAK,OACLC,SAAU,SAACL,GAAD,OAAON,EAASM,EAAEM,OAAOC,QACnCA,MAAOd,EACPe,YAAY,kBACX,IANL,OAQE,4BAAQpB,UAAU,QAAQqB,UAAWhB,EAAMS,QAA3C,WAIDX,EAAMmB,KAAI,SAACC,GAAD,OACT,yBAAKvB,UAAU,KACb,kBAAC,EAAD,CACEwB,IAAKD,EAAK7B,GACVA,GAAI6B,EAAK7B,GACTC,IAAK4B,EAAK5B,IACVC,WAAY,SAACF,GAAD,OA1BH,SAACA,EAAIS,EAAOC,GAC7BA,EAAQD,EAAMsB,QAAO,SAACC,GAAD,OAAUA,EAAKhC,IAAMA,MAyBdE,CAAWF,EAAIS,EAAOC,YC7BlCuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52538fac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction Note({ id, msg, deleteNote }) {\r\n  const [isMark, setMark] = useState(false);\r\n  const mark = () => {\r\n    setMark(!isMark);\r\n  };\r\n  return (\r\n    <div className=\"note\">\r\n      <div className=\"left\">\r\n        <p>\r\n          {id} |<span className={isMark ? \"change\" : \"\"}> {msg}</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"btn\">\r\n        <button className=\"red\" onClick={() => deleteNote(id)}>\r\n          Delete\r\n        </button>{\" \"}\r\n        &nbsp;\r\n        <button className=\"green\" onClick={mark}>\r\n          {isMark ? \"UnMark\" : \"Mark\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Note;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Note from \"./Note\";\nimport logo from \"./logo.svg\";\n\nfunction App() {\n  const [notes, setNote] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const handleSubmit = (e, notes, setNote, input, setInput) => {\n    e.preventDefault();\n    const id = notes.length ? notes[notes.length - 1].id + 1 : 0;\n    setNote([...notes, { id: id, msg: input }]);\n    setInput(\"\");\n  };\n  const deleteNote = (id, notes, setNote) => {\n    setNote(notes.filter((note) => note.id != id));\n  };\n\n  return (\n    <div>\n      <h1 className=\"title\">To-Do List...</h1>\n      <img src={logo} width=\"100px\" className=\"img\" alt=\"\" />\n      <form onSubmit={(e) => handleSubmit(e, notes, setNote, input, setInput)}>\n        <input\n          type=\"text\"\n          onChange={(e) => setInput(e.target.value)}\n          value={input}\n          placeholder=\"Write toDo...\"\n        />{\" \"}\n        &nbsp;\n        <button className=\"green\" disabled={!input.length}>\n          Submit\n        </button>\n      </form>\n      {notes.map((item) => (\n        <div className=\"p\">\n          <Note\n            key={item.id}\n            id={item.id}\n            msg={item.msg}\n            deleteNote={(id) => deleteNote(id, notes, setNote)}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}